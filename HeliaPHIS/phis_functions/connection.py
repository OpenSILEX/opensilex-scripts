import opensilexClientToolsPython
from colorama import Fore, Style
from opensilexClientToolsPython.rest import ApiException


def connect_to_phis(identifier, pwd):
    """Connect a user to Phis. Must be called before any other function of this module.

        :param identifier: user's identifier in Phis
        :type identifier: str
        :param pwd: user's password in Phis
        :type pwd: str
        :return: Client generated by opensilex connect function
        :rtype: TokenGetDTO
    """
    pythonClient = opensilexClientToolsPython.ApiClient()

    pythonClient.connect_to_opensilex_ws(identifier=identifier, password=pwd, host="http://138.102.159.37:8095/rest")
    api_instance = opensilexClientToolsPython.AuthenticationApi(pythonClient)
    # Authenticate a user and return an access token
    api_response = api_instance.authenticate(body=opensilexClientToolsPython.AuthenticationDTO(identifier, pwd))
    print(Fore.GREEN + "\nAccess granted")
    print(Style.RESET_ALL)
    return pythonClient


def refresh_connection(pythonClient):
    """Refresh connection in Phis (renew token).

            :param pythonClient: current client in phis
            :type pythonClient: TokenGetDTO
    """
    api_instance = opensilexClientToolsPython.AuthenticationApi(pythonClient)
    try:
        # Send back a new token if the provided one is still valid
        api_response = api_instance.renew_token()
    except ApiException as e:
        print("Exception when calling AuthenticationApi->renew_token: %s\n" % e)